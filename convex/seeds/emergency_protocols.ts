import { mutation } from '../_generated/server';
import { v } from 'convex/values';

// Emergency protocols for √ëuble region, Chile
const EMERGENCY_PROTOCOLS = [
  // Fire emergency protocol
  {
    title: 'Protocolo de Incendio',
    description: 'Procedimiento de emergencia para incendios forestales y urbanos',
    category: 'fire' as const,
    priority: 'critical' as const,
    pdfUrl: 'https://example.com/protocols/incendio-protocolo.pdf', // Placeholder - would be actual PDF URL
    thumbnailUrl: 'https://example.com/thumbnails/incendio-thumb.png', // Placeholder
    emergencyContacts: [
      { name: 'Bomberos Pinto', phone: '132', role: 'Servicio de Bomberos' },
      { name: 'CONAF √ëuble', phone: '+56-42-222-0000', role: 'Corporaci√≥n Nacional Forestal' },
      { name: 'Polic√≠a Local', phone: '133', role: 'Carabineros de Chile' },
      { name: 'ONEMI √ëuble', phone: '2-2234-5000', role: 'Oficina Nacional de Emergencias' },
    ],
    steps: [
      'Evaluar la situaci√≥n y determinar el tipo de incendio',
      'Alertar inmediatamente a los servicios de emergencia (Bomberos 132)',
      'Si es seguro, intentar controlar el fuego con extintores',
      'Evacuar el √°rea siguiendo las rutas de escape designadas',
      'Dirigirse al punto de reuni√≥n establecido (Plaza Central)',
      'No regresar hasta que las autoridades lo permitan',
      'Reportar cualquier lesi√≥n o da√±o adicional',
    ],
  },
  // Medical emergency protocol
  {
    title: 'Emergencia M√©dica',
    description: 'Protocolo para situaciones m√©dicas de urgencia',
    category: 'medical' as const,
    priority: 'high' as const,
    pdfUrl: 'https://example.com/protocols/emergencia-medica.pdf', // Placeholder
    thumbnailUrl: 'https://example.com/thumbnails/medica-thumb.png', // Placeholder
    emergencyContacts: [
      { name: 'SAMU', phone: '131', role: 'Servicio de Atenci√≥n M√©dica de Urgencia' },
      { name: 'Hospital Pinto', phone: '+56-42-123-4567', role: 'Hospital local' },
      { name: 'Cl√≠nica √ëuble', phone: '+56-42-234-5678', role: 'Cl√≠nica privada' },
      { name: 'Cruz Roja', phone: '600-360-1000', role: 'Servicio voluntario' },
    ],
    steps: [
      'Evaluar el estado del paciente y determinar la urgencia',
      'Llamar inmediatamente al SAMU (131) si es una emergencia grave',
      'Proporcionar RCP si el paciente no respira y conoce el procedimiento',
      'No mover al paciente si hay sospecha de lesi√≥n en columna',
      'Mantener al paciente c√≥modo y vigilado',
      'Informar a familiares o contactos de emergencia',
      'Acompa√±ar al paciente hasta la llegada de ayuda profesional',
    ],
  },
  // Police/security emergency protocol
  {
    title: 'Emergencia de Seguridad',
    description: 'Protocolo para situaciones de seguridad y delitos',
    category: 'security' as const,
    priority: 'high' as const,
    pdfUrl: 'https://example.com/protocols/emergencia-seguridad.pdf', // Placeholder
    thumbnailUrl: 'https://example.com/thumbnails/seguridad-thumb.png', // Placeholder
    emergencyContacts: [
      { name: 'Carabineros', phone: '133', role: 'Polic√≠a Nacional' },
      { name: 'PDI Pinto', phone: '+56-42-345-6789', role: 'Polic√≠a de Investigaciones' },
      { name: 'Guardia Municipal', phone: '+56-42-456-7890', role: 'Seguridad municipal' },
      { name: 'Fiscal√≠a Local', phone: '+56-42-567-8901', role: 'Ministerio P√∫blico' },
    ],
    steps: [
      'Asegurar su propia seguridad primero',
      'Llamar inmediatamente a Carabineros (133)',
      'Proporcionar ubicaci√≥n exacta y descripci√≥n detallada',
      'No confrontar al sospechoso si representa peligro',
      'Documentar lo sucedido con fotos/videos si es seguro',
      'Cooperar con las autoridades cuando lleguen',
      'Reportar a la comunidad a trav√©s de la app si es relevante',
      'Buscar apoyo psicol√≥gico si es necesario',
    ],
  },
  // Natural disaster protocol (earthquake focus for Chile)
  {
    title: 'Desastre Natural - Terremoto',
    description: 'Protocolo de respuesta ante terremotos y r√©plicas',
    category: 'natural_disaster' as const,
    priority: 'critical' as const,
    pdfUrl: 'https://example.com/protocols/terremoto-protocolo.pdf', // Placeholder
    thumbnailUrl: 'https://example.com/thumbnails/terremoto-thumb.png', // Placeholder
    emergencyContacts: [
      { name: 'ONEMI Nacional', phone: '2-2234-5000', role: 'Oficina Nacional de Emergencias' },
      { name: 'Carabineros', phone: '133', role: 'Polic√≠a Nacional' },
      { name: 'Bomberos', phone: '132', role: 'Servicio de Bomberos' },
      { name: 'Defensa Civil', phone: '+56-42-678-9012', role: 'Protecci√≥n Civil' },
    ],
    steps: [
      'Mantener la calma y protegerse bajo una mesa resistente',
      'Cubrir cabeza y cuello con brazos para protecci√≥n',
      'Despu√©s del movimiento, evacuar ordenadamente siguiendo rutas designadas',
      'No usar ascensores durante la evacuaci√≥n',
      'Dirigirse al punto de reuni√≥n establecido (Plaza Central)',
      'Evaluar da√±os y reportar heridos a servicios de emergencia',
      'Escuchar radio o app para actualizaciones oficiales',
      'No regresar a estructuras da√±adas sin autorizaci√≥n',
    ],
  },
  // Evacuation protocol
  {
    title: 'Protocolo de Evacuaci√≥n',
    description: 'Procedimiento general de evacuaci√≥n comunitaria',
    category: 'evacuation' as const,
    priority: 'high' as const,
    pdfUrl: 'https://example.com/protocols/evacuacion-protocolo.pdf', // Placeholder
    thumbnailUrl: 'https://example.com/thumbnails/evacuacion-thumb.png', // Placeholder
    emergencyContacts: [
      { name: 'Centro de Operaciones', phone: '+56-42-789-0123', role: 'Junta de Vecinos' },
      { name: 'Defensa Civil', phone: '+56-42-890-1234', role: 'Protecci√≥n Civil' },
      { name: 'Carabineros', phone: '133', role: 'Control de tr√°nsito' },
      { name: 'Bomberos', phone: '132', role: 'Apoyo log√≠stico' },
    ],
    steps: [
      'Atender las se√±ales de alerta (sirenas, app, meg√°fonos)',
      'Preparar kit de emergencia b√°sico (documentos, medicamentos, agua)',
      'Cerrar v√°lvulas de gas y electricidad si es seguro',
      'Ayudar a personas vulnerables (ancianos, discapacitados)',
      'Evacuar siguiendo las rutas marcadas y se√±al√©ticas',
      'No usar veh√≠culos particulares para evitar congestionamiento',
      'Dirigirse al punto de reuni√≥n designado',
      'Registrar llegada en el punto de reuni√≥n',
      'Esperar instrucciones de las autoridades',
    ],
  },
];

export const seedEmergencyProtocols = mutation({
  args: {
    forceProduction: v.optional(v.boolean()),
  },
  handler: async (ctx, args) => {
    console.log('üìã Starting emergency protocols seeding...');

    // PRODUCTION SAFETY CHECK
    const isProduction = process.env.NODE_ENV === 'production' ||
                        process.env.CONVEX_ENV === 'production' ||
                        !process.env.CONVEX_DEV;

    if (isProduction && !args.forceProduction) {
      console.log('üö® PRODUCTION ENVIRONMENT DETECTED!');
      console.log('‚ùå Emergency protocols seeding is DISABLED by default in production');
      console.log('üí° To seed in production, set forceProduction: true');
      return {
        seeded: 0,
        skipped: true,
        message: 'Production seeding skipped - use forceProduction: true to override'
      };
    }

    let protocolsCreated = 0;
    let skipped = 0;

    // Get the first admin user to set as creator
    const adminUser = await ctx.db.query('users').filter(q => q.eq(q.field('role'), 'admin')).first();
    const defaultUser = adminUser || await ctx.db.query('users').first();

    if (!defaultUser) {
      console.log('‚ö†Ô∏è No users found in database. Please create a user first.');
      return {
        seeded: 0,
        skipped: true,
        message: 'No users available to create emergency protocols'
      };
    }

    for (const protocolData of EMERGENCY_PROTOCOLS) {
      // Check if protocol already exists
      const existing = await ctx.db
        .query('emergencyProtocols')
        .filter(q =>
          q.and(
            q.eq(q.field('title'), protocolData.title),
            q.eq(q.field('category'), protocolData.category)
          )
        )
        .first();

      if (existing) {
        console.log(`‚è≠Ô∏è Skipping existing protocol: ${protocolData.title}`);
        skipped++;
        continue;
      }

      try {
        await ctx.db.insert('emergencyProtocols', {
          ...protocolData,
          isActive: true,
          offlineAvailable: true,
          downloadCount: 0,
          createdBy: defaultUser._id,
          createdAt: Date.now(),
          updatedAt: Date.now(),
        });

        console.log(`‚úÖ Created emergency protocol: ${protocolData.title}`);
        protocolsCreated++;
      } catch (error) {
        console.error(`‚ùå Failed to create protocol ${protocolData.title}:`, error);
      }
    }

    console.log(`üìã Emergency protocols seeding completed!`);
    console.log(`   Created: ${protocolsCreated} protocols`);
    console.log(`   Skipped: ${skipped} existing protocols`);

    return {
      seeded: protocolsCreated,
      skipped,
      total: protocolsCreated + skipped,
      message: `Emergency protocols seeding completed successfully`
    };
  },
});