#!/bin/bash

# Full deployment script for PintoPellines
# Deploys complete functionality with safety checks and rollback capabilities

set -e  # Exit on any error

echo "🚀 Starting PintoPellines FULL deployment..."
echo "📋 This will deploy ALL features including cameras, payments, and emergency systems"
echo "⚠️  Ensure your environment is properly configured for complete functionality"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to log with timestamp
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
}

# Function to handle errors
error_exit() {
    echo -e "${RED}❌ Error: $1${NC}" >&2
    echo "💡 Consider using rollback if deployment failed partially"
    exit 1
}

# DEPLOYMENT SAFETY CHECKS
log "🔍 Running deployment safety checks..."
log "⚠️  Verifying FULL deployment profile..."

# Check for any simplified deployment attempts
if [ "$NEXT_PUBLIC_DEPLOYMENT_PROFILE" != "full" ] && [ -n "$NEXT_PUBLIC_DEPLOYMENT_PROFILE" ]; then
    log "🚫 BLOCKED: Attempted simplified deployment"
    error_exit "PintoPellines must ALWAYS deploy with FULL functionality. Remove NEXT_PUBLIC_DEPLOYMENT_PROFILE or set to 'full'."
fi

if ! npx tsx scripts/deployment-safety-check.ts; then
    error_exit "Safety checks failed. Deployment aborted for data protection."
fi

# BACKUP CURRENT STATE (for rollback)
log "💾 Creating deployment backup..."
BACKUP_DIR="backups/$(date '+%Y%m%d_%H%M%S')"
mkdir -p "$BACKUP_DIR"

# Backup environment files (without secrets)
cp .env.example "$BACKUP_DIR/" 2>/dev/null || true
echo "Backup created in: $BACKUP_DIR"

# DEPLOYMENT PROCESS
log "🏗️ Building application..."
if ! npm run build; then
    error_exit "Build failed"
fi

log "☁️ Deploying to Convex..."
if ! npx convex deploy --yes; then
    error_exit "Convex deployment failed"
fi

log "🌐 Deploying to Vercel..."
if ! npx vercel --prod --yes; then
    error_exit "Vercel deployment failed"
fi

# POST-DEPLOYMENT VALIDATION
log "✅ Validating deployment..."
sleep 10  # Wait for deployment to propagate

# Check if the app is responding
DEPLOYMENT_URL=$(npx vercel --yes 2>/dev/null | grep -o 'https://[^ ]*' | tail -1)
if [ -n "$DEPLOYMENT_URL" ]; then
    if curl -s --head --fail "$DEPLOYMENT_URL" > /dev/null; then
        log "✅ Deployment validation passed"
        echo -e "${GREEN}🎉 Deployment completed successfully!${NC}"
        echo "🌐 Application available at: $DEPLOYMENT_URL"
    else
        error_exit "Deployment validation failed - app not responding"
    fi
else
    log "⚠️ Could not determine deployment URL, but deployment appears successful"
    echo -e "${GREEN}🎉 Deployment completed!${NC}"
fi

# ROLLBACK FUNCTION (can be called manually)
rollback() {
    echo -e "${YELLOW}🔄 Starting rollback process...${NC}"

    # This would need to be enhanced based on your specific rollback needs
    # For now, it just logs what would need to be done

    echo "To rollback:"
    echo "1. Restore from backup: $BACKUP_DIR"
    echo "2. Revert Convex deployment: npx convex deploy --yes (with previous code)"
    echo "3. Redeploy to Vercel with previous version"

    echo -e "${RED}⚠️ Manual rollback required${NC}"
}